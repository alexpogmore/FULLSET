using UnityEngine;
using UnityEngine.UI;
using System.Data;
using Mono.Data.Sqlite;
using System.Diagnostics;
using TMPro;
using System;
using System.Collections;
using System.CodeDom.Compiler;
using System.Security.Cryptography.X509Certificates;

public class DatabaseController : MonoBehaviour
{
    private string dbName = "URI=file:SensorData.db";   // The database is therefore always within the same folder as the project, and is called SensorData.db.
    
    // Define variables for status indicators, floating text, and global storage.
    public TextMeshProUGUI canvasText1;                 
    public TextMeshProUGUI canvasText2;                 
    public TextMeshProUGUI canvasText3;                 
    public GameObject TempStatusDC;                     
    public GameObject HumiStatusDC;                     
    public TextMeshPro TempValueText;                   
    public TextMeshPro HumiValueText;                   
    string longstring;                                  
    string timestamp;                                   
    string device;                                      
    float temp;                                         
    float humi;                                         
    public GameObject TempStatusMakerspace;             
    public GameObject HumiStatusMakerspace;             
    public TextMeshPro TempValueTextMakerspace;         
    public TextMeshPro HumiValueTextMakerspace;         
    string timestamp2;                                  
    string device2;                                     
    float temp2;                                        
    float humi2;                                        
    string longstring2;                                 
    public float speed = 1f;

    // Following four public variables are for the dropdown and inputfield values of the control signal pop-up.
    public TMP_Dropdown Function;
    public TMP_Dropdown Variable;
    public TMP_InputField Value;
    public TMP_Dropdown Location;
    public Button controlSignalSendButton;
    public Button controlSignalClearButton;

    void Start()
    {
        // Wipe Canvas.
        Destroy(GameObject.Find("UnityBuildCanvas"));

        // Control signal value to be passed to database.
        string valueString;
        valueString = Value.text.ToString();

        // Add a listener to the control signal 'send' button.
        Button sendBtn = controlSignalSendButton.GetComponent<Button>();
        sendBtn.onClick.AddListener(() => AddData(Function.value, Variable.value, valueString, Location.value));

        // Add a listener to the control signal 'clear' button.
        Button clearBtn = controlSignalClearButton.GetComponent<Button>();
        clearBtn.onClick.AddListener(ClearControl);
        
        // Create the database and tables.
        CreateDB();
    }

    void Update()
    {
        DisplayLatestData();
    }

    // Create the database and tables.
    public void CreateDB()
    {
        using (var connection = new SqliteConnection(dbName))
        {
            connection.Open();

            using (var command = connection.CreateCommand())
            {
                command.CommandText = "CREATE TABLE IF NOT EXISTS data_latest (TIMESTAMP TEXT NOT NULL, DEVICE TEXT NOT NULL, TEMP REAL NOT NULL, HUMI REAL NOT NULL);";
                command.ExecuteNonQuery();
                command.CommandText = "CREATE TABLE IF NOT EXISTS data_historical (TIMESTAMP TEXT NOT NULL, DEVICE TEXT NOT NULL, TEMP REAL NOT NULL, HUMI REAL NOT NULL);";
                command.ExecuteNonQuery();
                command.CommandText = "CREATE TABLE IF NOT EXISTS control (ID INT NOT NULL UNIQUE, DEVICE TEXT NOT NULL, SIGNAL TEXT NOT NULL);";
                command.ExecuteNonQuery();
                command.CommandText = "INSERT INTO control (ID, DEVICE, SIGNAL) VALUES ('1', 'All', 'X');";
                command.ExecuteNonQuery();
            }
            connection.Close();
        }
    }
    
    public void AddData(int f_index, int v_index, string value, int l_index)
    {
        using (var connection = new SqliteConnection(dbName))
        {
            connection.Open();
            using (var command = connection.CreateCommand())
            {
                // Set location (target device)
                string locationString = Location.options[l_index].text;
                command.CommandText = "UPDATE control SET DEVICE = '" + locationString + "' WHERE ID='1';";
                command.ExecuteNonQuery();

                // Set signal
                string functionString = Function.options[f_index].text;
                string variableString = Variable.options[v_index].text;
                string signal = functionString + " " + variableString + " by " + value;
                command.CommandText = "UPDATE control SET SIGNAL = '" + signal + "' WHERE ID='1'";
                command.ExecuteNonQuery();
            }
            connection.Close();
        }
    }

    // Clear control signal in database.
    public void ClearControl()
    {
        using (var connection = new SqliteConnection(dbName))
        {
            connection.Open();

            using (var command = connection.CreateCommand())
            {
                command.CommandText = "UPDATE control SET DEVICE = 'All', SIGNAL = 'X' WHERE ID = '1';";
                command.ExecuteNonQuery();
            }
            connection.Close();
        }
    }

    public void DisplayLatestData()
    {
        using (var connection = new SqliteConnection(dbName))
        {
            connection.Open();
            using (var command = connection.CreateCommand())
            {
                command.CommandText = "SELECT * FROM data_latest WHERE device = 'RPi Sense HAT 1'";
                using (IDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())

                    longstring = reader.GetString(0) + "#" + reader.GetString(1) + "#" + reader.GetFloat(2) + "#" + reader.GetFloat(3);// + "#" + reader.GetFloat(4);
                    string[] latestValues = longstring.Split('#');                                  // These two lines concatenate all the row values into one string (separated by #) and then we split them into their respective variables below.

                    timestamp = latestValues[0];
                    device = latestValues[1];
                    temp = float.Parse(latestValues[2]);
                    humi = float.Parse(latestValues[3]);

                    if (temp < 18)                                                              // Make this into a contextScheme() method later?
                    {
                        TempStatusMakerspace.GetComponent<Renderer>().material.color = Color.blue;
                        TempValueTextMakerspace.text = "Temperature is very cold (" + temp + "°C). Action required.";
                    }
                    else if (18 <= temp && temp < 20)
                    {
                        TempStatusMakerspace.GetComponent<Renderer>().material.color = Color.cyan;
                        TempValueTextMakerspace.text = "Temperature is cool (" + temp + "°C). Action suggested.";
                    }
                    else if (20 <= temp && temp < 22)
                    {
                        TempStatusMakerspace.GetComponent<Renderer>().material.color = Color.gray;
                        TempValueTextMakerspace.text = "Temperature is optimal (" + temp + "°C).";
                    }
                    else if (22 <= temp && temp < 24)
                    {
                        TempStatusMakerspace.GetComponent<Renderer>().material.color = Color.magenta;
                        TempValueTextMakerspace.text = "Temperature is warm (" + temp + "°C). Action suggested.";
                    }
                    else if (temp >= 24)
                    {
                        TempStatusMakerspace.GetComponent<Renderer>().material.color = Color.red;
                        TempValueTextMakerspace.text = "Temperature is hot (" + temp + "°C). Action required.";
                    }

                    if (humi < 30)
                    {
                        HumiStatusMakerspace.GetComponent<Renderer>().material.color = Color.blue;
                        HumiValueTextMakerspace.text = "Humidity is very low (" + humi + "%). Action required.";
                    }
                    else if (30 <= humi && humi < 40)
                    {
                        HumiStatusMakerspace.GetComponent<Renderer>().material.color = Color.cyan;
                        HumiValueTextMakerspace.text = "Humidity is low (" + humi + "%). Action suggested.";
                    }
                    else if (40 <= humi && humi <= 60)
                    {
                        HumiStatusMakerspace.GetComponent<Renderer>().material.color = Color.gray;
                        HumiValueTextMakerspace.text = "Humidity is optimal (" + humi + "%).";
                    }
                    else if (61 <= humi && humi <= 70)
                    {
                        HumiStatusMakerspace.GetComponent<Renderer>().material.color = Color.magenta;
                        HumiValueTextMakerspace.text = "Humidity is high (" + humi + "%). Action suggested.";
                    }
                    else if (humi > 70)
                    {
                        HumiStatusMakerspace.GetComponent<Renderer>().material.color = Color.red;
                        HumiValueTextMakerspace.text = "Humidity is very high (" + humi + "%). Action required.";
                    }
                    canvasText1.text = "Device ID: " + device + "\x0ATemperature: " + temp + "°C" + "\x0AHumidity: " + humi + "%" + "\x0ATimestamp: " + timestamp;
                    canvasText2.text = "Device ID: RPi Sense HAT 2" + "\x0ATemperature: " + temp*0.8 + "°C" + "\x0AHumidity: " + humi*0.95 + "%" + "\x0ATimestamp: " + timestamp;
                    reader.Close();
                }
                /*
                command.CommandText = "SELECT * FROM data_latest WHERE device = 'RPi Sense HAT 2';";
                using (IDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())

                    longstring2 = reader.GetString(0) + "#" + reader.GetString(1) + "#" + reader.GetFloat(2) + "#" + reader.GetFloat(3);
                    string[] latestValues2 = longstring2.Split('#');                                  // These two lines concatenate all the row values into one string (separated by #) and then we split them into their respective variables below.

                    UnityEngine.Debug.Log(longstring2);

                    timestamp2 = latestValues2[0];
                    device2 = latestValues2[1];
                    temp2 = float.Parse(latestValues2[2]);
                    humi2 = float.Parse(latestValues2[3]);

                    contextScheme(temp2, humi2, TempStatusMakerspace, HumiStatusMakerspace, TempValueTextMakerspace, HumiValueTextMakerspace);

                    reader.Close();
                }*/
            }
            connection.Close();
        }
    }
}
